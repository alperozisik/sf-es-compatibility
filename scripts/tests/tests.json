{
	"Promise": [{
		"name": "basic functionality",

		"script": "test(function(){try{var asyncTestPassed=asyncPassed;try{return Function(\"asyncTestPassed\",\"\\nvar p1 = new Promise(function(resolve, reject) { resolve(\\\"foo\\\"); });\\nvar p2 = new Promise(function(resolve, reject) { reject(\\\"quux\\\"); });\\nvar score = 0;\\n\\nfunction thenFn(result)  { score += (result === \\\"foo\\\");  check(); }\\nfunction catchFn(result) { score += (result === \\\"quux\\\"); check(); }\\nfunction shouldNotRun(result)  { score = -Infinity;   }\\n\\np1.then(thenFn, shouldNotRun);\\np2.then(shouldNotRun, catchFn);\\np1.catch(shouldNotRun);\\np2.catch(catchFn);\\n\\np1.then(function() {\\n  // Promise.prototype.then() should return a new Promise\\n  score += p1.then() !== p1;\\n  check();\\n});\\n\\nfunction check() {\\n console.log(`score for basic promise support is ${score}`) if (score === 4) asyncTestPassed();\\n}\\n      \")(asyncTestPassed)}catch(e){asyncTestPassed=global.__strictAsyncPassedFn && __strictAsyncPassedFn(\"422\");return Function(\"asyncTestPassed\",\"'use strict';\"+\"\\nvar p1 = new Promise(function(resolve, reject) { resolve(\\\"foo\\\"); });\\nvar p2 = new Promise(function(resolve, reject) { reject(\\\"quux\\\"); });\\nvar score = 0;\\n\\nfunction thenFn(result)  { score += (result === \\\"foo\\\");  check(); }\\nfunction catchFn(result) { score += (result === \\\"quux\\\"); check(); }\\nfunction shouldNotRun(result)  { score = -Infinity;   }\\n\\np1.then(thenFn, shouldNotRun);\\np2.then(shouldNotRun, catchFn);\\np1.catch(shouldNotRun);\\np2.catch(catchFn);\\n\\np1.then(function() {\\n  // Promise.prototype.then() should return a new Promise\\n  score += p1.then() !== p1;\\n  check();\\n});\\n\\nfunction check() {\\n  if (score === 4) asyncTestPassed();\\n}\\n      \")(asyncTestPassed)&&\"Strict\"}}catch(e){return false;}}());"
	}]
}
